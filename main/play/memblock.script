go.property("width", 1)
go.property("value", 1)
go.property("template", hash("block_1x1_a"))
go.property("color", 3)
go.property("bank", msg.url())

local BANK_X = 32
local BANK_Y = 96
local BANK_COLS = 16
local BANK_ROWS = 16
local TSIZE = 32

local get_template, for_each_cell, snap_to_grid, place_into_map, overlap_with_map,
	collide_with_point, is_target_position_over_bank

local TEMPLATES = {
	{ id = hash("1x1_a"), grid = {1}, w = 1, h = 1 },
	{ id = hash("2x2_a"), grid = {1, 1, 1, 1}, w = 2, h = 2 },
	{ id = hash("2x2_b"), grid = {1, 1, 1, 0}, w = 2, h = 2 }
}

local COLLISION_COLOR = 2

function init(self)
	self.template = get_template(go.get("#", "template"))
	self.offset = vmath.vector3(-self.template.w * TSIZE / 2, -self.template.h * TSIZE / 2, 0)

	for_each_cell(self, function (cell, x, y, i)
		if cell > 0 then
			tilemap.set_tile("#grid", "main", x, y, go.get("#", "color"))
		end
	end)

	print(msg.url(go.get("#", "bank")).path)

	self.target_position = nil
	self.grid_position = vmath.vector3()
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if self.target_position then
		go.set_position(self.target_position + self.offset)
		if is_target_position_over_bank(self) then
			snap_to_grid(self)
		end
	end
end

function on_message(self, message_id, message, sender)
	-- level sends command to make a block target a position
	if message_id == hash("target_position") then
		self.target_position = message.position
		overlap_with_map(self)

	-- level sends command to place a block into the bank
	elseif message_id == hash("place_into_map") then
		self.level = sender
		place_into_map(self)

	-- level asks if mouse is over this memblock
	elseif message_id == hash("check_cursor_overlap") then
		local collision = collide_with_point(self, message.x, message.y)
		if collision then
			msg.post(sender, "cursor_overlap_result", { result = collision })
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

-- ----------------------------------------------

function for_each_cell(self, callback)
	local i = 1
	for x=1,self.template.w do
		for y=1,self.template.h do
			callback(self.template.grid[i], x, y, i)
			i = i + 1
		end
	end
end

function get_template(id)
	for i=1,#TEMPLATES do
		if TEMPLATES[i].id == id then
			return TEMPLATES[i]
		end
	end

	return nil
end

function snap_to_grid(self)
	local col = math.min(math.max(0, math.floor(
		(go.get_position().x - BANK_X) / TSIZE)), BANK_COLS - self.template.w)
	local row = math.min(math.max(0, math.floor(
		(go.get_position().y - BANK_Y) / TSIZE)), BANK_ROWS - self.template.h)

	self.grid_position = vmath.vector3(col, row, 0)

	local position = vmath.vector3(
		BANK_X + col * TSIZE,
		BANK_Y + row * TSIZE,
		go.get_position().z
	)
	go.set_position(position)
end

function place_into_map(self)
	msg.post(go.get("#", "bank"), "place_block", {
		block_id = go.get_id(),
		block_data = {
			col = self.grid_position.x,
			row = self.grid_position.y,
			color = go.get("#", "color"),
			template = self.template
		}
	})
end


function overlap_with_map(self)
	local is_collision = false
	local map_url = msg.url(go.get("#", "bank").socket, go.get("#", "bank").path, "map")
	
	for_each_cell(self, function(cell, x, y, i)
		if cell > 0 then
			local col = self.grid_position.x + x
			local row = self.grid_position.y + y
			local map_cell = tilemap.get_tile(map_url, "main", col, row)
			if map_cell > 1 then
				is_collision = true
				tilemap.set_tile("#grid", "main", x, y, COLLISION_COLOR)
			else
				tilemap.set_tile("#grid", "main", x, y, go.get("#", "color"))
			end
		end
	end)
	
	return is_collision
end

function collide_with_point(self, x, y)
	local position = go.get_position()
	local w = self.template.w * TSIZE
	local h = self.template.h * TSIZE

	return x >= position.x and x < position.x + w and
		y >= position.y and y < position.y + h
end

function is_target_position_over_bank(self)
	local x = self.target_position.x
	local y = self.target_position.y
	local w = BANK_COLS * TSIZE
	local h = BANK_ROWS * TSIZE
	
	return x >= BANK_X and x < BANK_X + w and y >= BANK_Y and y < BANK_Y + h
end