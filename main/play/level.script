local spawn_memblock, drag_memblock

local TSIZE = 32
local BLOCK_TYPES = {
	"1x1_a",
	"2x2_a",
	"2x2_b"
}

local QUEUE_X = 736
local QUEUE_Y = 480

local MIN_BLOCK_COLOR = 3
local MAX_BLOCK_COLOR = 6

function init(self)
	local cursor_image = resource.load("/assets/resources/cursor.png")
	defos.set_cursor({ image = cursor_image, hot_spot_x = 10, hot_spot_y = 10 })
	
	msg.post(".", "acquire_input_focus")
	self.mouse_x = 0
	self.mouse_y = 0

	self.blocks = {}
	self.placed_cache = {}

	self.queued_block = spawn_memblock(self, QUEUE_X, QUEUE_Y)
	self.active_block = nil -- spawn_memblock(self.mouse_x, self.mouse_y)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("memblock_placed") then
		msg.post(self.active_block, "disable")
		if self.active_block == self.queued_block then
			self.queued_block = spawn_memblock(self, QUEUE_X, QUEUE_Y)
		end
		self.active_block = nil
		
	elseif message_id == hash("memblock_overlap") then
		self.active_block = message.block_id
		if self.active_block ~= self.queued_block then
			msg.post("main:/level/membank", "remove_block", { block_id = message.block_id })
		end
		msg.post(self.active_block, "enable")
		drag_memblock(self)
	end
end

function on_input(self, action_id, action)
	if action_id == nil then --mouse move
		self.mouse_x = action.screen_x
		self.mouse_y = action.screen_y
		if self.active_block then
			drag_memblock(self)
		end
	elseif action_id == hash("touch") and action.pressed then -- mouse click
		if self.active_block then
			msg.post(self.active_block, "place_into_map")
		else
			msg.post(self.queued_block, "check_cursor_overlap", {x = action.screen_x, y = action.screen_y })
			msg.post("main:/level/membank", "check_cursor_overlap", { x = action.screen_x, y = action.screen_y })
		end
	end
end

-- ----------------------------------------------------------

function spawn_memblock(self, x, y)
	local color = math.random(MIN_BLOCK_COLOR, MAX_BLOCK_COLOR)
	local template = BLOCK_TYPES[math.random(#BLOCK_TYPES)]

	local url = msg.url("main:/level/membank")

	local memblock = factory.create("memblock_spawner#factory", vmath.vector3(x, y, 0.5), nil,
		{ template = hash(template), bank = url, color = color })
	table.insert(self.blocks, memblock)
		
	return memblock
end

function drag_memblock(self)
	local new_position = vmath.vector3(self.mouse_x, self.mouse_y, 0.5)
	msg.post(self.active_block, "target_position", { position = new_position })
end